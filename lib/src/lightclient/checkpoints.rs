
pub fn get_closest_checkpoint(chain_name: &str, height: u64) ->  Option<(u64, &'static str, &'static str)> {
    match chain_name {
        "test" => get_test_checkpoint(height),
        "main" => get_main_checkpoint(height),
        _      => None
    }
}

fn get_test_checkpoint(height: u64) ->  Option<(u64, &'static str, &'static str)> {
    let checkpoints: Vec<(u64, &str, &str)> = vec![
        (130000, "000000001c4a5aa11e6c142931463fcf7a9f5b9fb41061d26c18ff1860431881",
                 ""
        ),
        (152000, "00000000d7c0f7d63b7e628cfcb9fdd45c9d2a244326532c61dfff7fb0d4af45",
                 ""
        )
    ];

    find_checkpoint(height, checkpoints)
}


fn get_main_checkpoint(height: u64) ->  Option<(u64, &'static str, &'static str)> {
    let checkpoints: Vec<(u64, &str, &str)> = vec![
		(600000,  "0000059f18de37e09365a55ea0a35ff8d6c2dadf79115c0cb5f7e30851195737",

			"00dc3b41eab55bab464ea8743329a3c3c9ad1727c783d4b94026a62ecb4a35bbe6b17e395a22d73a573e25edaa11c79f25f10dcc6394ae108d633131e39b5722e93b9b360aff407b9483b41ca3b6f8b99cc9f5da9055bd65d125bd54c97e8c83d37a276c094f769401046694385c5a6e6162d903c7eaf595342fa4fe2c1efbf27219aa2713959693e5969204af7540a68e48ff8cdc141d4c30776dc71c8f22bcdccdc32ebe62636edd605a917514a844de777c699f57c6ba998329c6eb72b6370c2e1686653e31360343d2a09a354590cf2945a0b050e79029d823402d7dfcf7580632aecd57f2793a62ff0284523d2785a43564bcc0fbb8cb300556adad9c3014c14f5e52e850a78b163f6380ad04388ead35171d314da098176599135aca36d03a069ba9b1c6b434f6c5d60f8a876ee42e9b22e49c60b733877fd2862051a47733ce99083b538e555d1da6d2fc78add5254064fd0b67a55f9ffd74316b283eaba4df011349369402b53422932c54ad7521b006f64e80383e875a9476d958fb8db574f6e5b5b51ba1163a6bc3ee2f73"
		),

		(700000,  "000007a79542a42888a3a35d64a0925a3b2a5f188c239a65a5c6283b9c3d24d2",

			"005852dbc2bf661b9bf787e441b26ac99791af7de3e7db11344b72b866f952f575369e5416a52d9e44e493b5c8ee4da62273021e696c6bf49fb5d8b0a128c1d7fa4df20ca904a8c2dc465817b34a7cc7a707b844a57a0beb6ae68e31b4eefca1898d596709413123ecf907323168831f748855c51f23e18ded5af9cb7b27d55aed06615d06ab8f3bdbd73243161f0e29dc25a3cb881714bed219781e4b587ef9d0dad1ea2d45c1f15152e5b12a14b52f4153a4f52a52960411aba616b6ccc623282ee38b79a86828036a618eb36b5a813311b93110fe08e57c7b89b30b1137c1f70d1442f49144cb7f21a5e816479e961640dd1a2ff3012fa03c14bf27473169b19803791e8924100a750b7b81914cf7a4dd4353258246b251ee4f6d1fc335257a9604ce582a8866cbbe6edf0730a6f2c9582dadeb17d8afd3b94923ff9752e8cf179c244c61263ff7d0ab64e3fa3fffdff7c91d575491de092e2b5ed3611bb8f2da13f28cb91fd2f55501e996bef932a56e17d0d2e6a93161cc3410891fb2fe56ca4bb7a2e53e1ba50e876f61916e63"
        ),

		(800000,  "000003c5f3cf5fcbb60a9910331f30599586777c926380f33a206d140dee050e",

			"018e98be14b55a1e73734759e598ed9f2468499163070057cc14199fc9a6bbd9db6e4dca3b1472f90acecf2ac0a7a990f3a213aad15de5674b417a7ffa0344195c7d57454d2bb01cdcb1174247982bc6249692b17b9c87942c246adfeb6688270fc85a280dbf478b86f2582e11aef85d027a412e200da5994f62dbd6aa35a8983a9e4d59b172f71973465afcfc6ce4cdf7908cff1b29209f392fd12f2662aafaec42f3a1b2034be55981a9a97c06c123d5c01fa85b1c4bcab8f8dde265d8c188c141ec66c11c607a0494f43c15951c81a75833b0f33f60e34d5b89745674e961a00c77a0676cff10bce2aac8aaf3f3a8b53c09a2bf2505ba759f0beee02ffc3ba0eaa71c4f1a61a1d97f306863542a1fe1989b202c519b1d091fb034d5900f3780714659b2661e87b77a82340aad4989ecf0a210a79450066203c2f2466dcdda6f55a9c12914bf580b75605311a9eedc2a23f2e1b56565e1dba443240dc8176b70cc147d595f4f74247f94211a9f57d7ebb88fcbe3d7ce4317ae2925f8eebcb11fb9d60a79f79fae3b22c3d967665d30"
        ),

		(900000,  "000001c2ee8430cb4fe8aff934a8e3ddf08dac76b526c411965cc5b824d0d063",

			"00ccbf6244a2c9ecf552b5b343ae77053cbf5509d10deb8fa45cb497bd309ca567fab517238667bfdeb249bf54d85dfb9ff30c486d5c0512036d0264fd09147164adda3fa9bb1ca9cb40a01388651867795b8158fc02a381c19cd2686dd651c5d9863c4c090c7b344f2a1242550948e1d435743bf894af52d02faa6fb839bef156841a15794478458f36f2b373ad9406fe50a798f51a0da067995f9b71029999e71f31b9e643bba16d7073973367c1100540227b2ca312b8f8c704b333eea4d292a97aa433ee32a902b661a453e2067c6dc950b9f7a23f5cb83a51f2d0fd8306f418b317ecf2678e6e3bf90b1011f2a2d20e2a82274e697e3c7626da98e9723b0f2a16924749e56fb1570a982ebd5e218a13d547e40dda3754d38cdeaac541c990e6f7ba010b1086b3d4ce5605eab48b3284e1d76e54e77e51b25bbc31938b88fb0bf2c3d25a0b9851bfe333168e5edff118d68ab4c061570173c5f5233e08bdbe22a9a90c805e1bd1ec31de0cf17ffa0652e997ab4e590fbe470aad015346cd4a8f6fa258702f23768535777afa5fd5"
        ),

		(1000000,  "00000492748cbbb83cc634c65747a49e1622aeb92680541b8107724ad45c0119",

			"009e9eb8c4bb0cb295e9c109c0ffc5f47c2457a09b4df666420f83f50b1cbed8654818201d938a099da53c29a66c47a2b18d0d3f24c31d5e0ac0020fc29e01fd0db97237bc817a833fc8d219cf969592ca0c54f3bddc3be74bcd8f1231ab444f4bfac49905a64ab16e2a86f96477640c042f22bf62ab3dc8ea11fe15f61a9a244ba78b3abfad3dad9df1edd3c7bfc0b782ab55eb1b2f175f254a377256685f4b43b9a1f0b349ac0246a96311f25f941f419efbd91ae2cdd3b9d406849b92da500706a074d1a875f21eeeb06974938f106d74730aa2d94c92cb458a1fcbb71afebf269eee31d5b262dced1a986d285e7aff7d42d62019917482a22d9275fcadaae49b76b82683a639450fdf2c19a7dd9fbc3c6b3739a96fec24fa2ac17fd2d5038863ffd13460fa2de33e56e526207a75e8d65228ded33996b44ae646e3d5a987fdc0e3ec70538654f1fd94b1ca2cffff9297940195618a0316d9fdd70add32e52530aee40f9b4e3fefaaf480b7749a7aa5fffdcf54440e42ed326fce1055af9f150a112719c25fd11f1e9528d778e572"
        ),

		(1100000,  "00001b1768b7cbcb5128b6a9f1dc33c123d649101153c8360be5dc77b2c70a71",

			"02c3ea1545054aaf353d6ff5e095d9bc1561a2d925e1de16e819622e5b72ced6c98bbd9e3c71fd54a4d58d2264fd09e1fc11086a0f33b5e8216886baa414763a2e97f5ba12c627b3fca03b0d083b1c85d4c7828ebe56baa0d1661d92a274886c09a3274e03a6fa2fd1e271544bf8d3d3826da0536c38da86cde76927142371bd4ca448aeb16ebe61f97a9084d76fc872c49b77df8add0b6f763f045d49ceefbebbabd91e50cd8dbf634fb7e1e1498432df98758ebd2aa32a1804f314e880953a196eb72bbfc7195008dde82bd2ac3159dedab13c6222cdb3152b497a31cd4af8a62175225b317f1a345011392bf657a906676ed23383f9807a6b10cd7021324487a2286f22cda3fa3514282ded55f83ede57be5ba2fd3ab0ab1e2f5f9aefa687135dbedcd13a64d005f7feaf2d147cbdea64e3ad517b2bead4b4218d5489c9c767f517e0aa3c1a8c7c04569cc35aafd86dd3e1e195aad222412d2597fd6d3419b6e4a48a9c98c80ed5bdd4c57f833332e314962dc073b54ba83e3ec4c76647ba5a4057261b06862d4455fda50d744ed0"
        ),

		(1200000,  "00001f9272b766d68c0123b0f5828cda42b24f2e45dd6559277a6fb66a78eea0",

			"02d29d42e9c4cbe8c9eb5fcaa78f103f27aefe074d9586713b179a56a708327162db9e5cdaa297fcb99bccc62d0bd13fc69108fe7123544685f145bef6885355f8da8607691434c6ae58801c11fe7da5aa560cbaaf866bf2375bab1ea9f98e4c3ae1685302f27c180c92134e18345800f0c72243ca6540ae81def3a2121278f8bf8c841f78a9760ee6730c475f94c34e6bcde962e9494ceaf932a3149936997ff4e9984069f5b2817397f4cffb6d2d4f279b5b07af1f086f339c1846e68d25455816a8a9a7b9fd1309ab9160c3e9c5a979973d0a07825a85841d27a4806fe1e2d60bb2218fede29817618dd8a8957962672a9ea2b4a22b5e45822d675c725c35545150ed18f4f609251bc234f2659a558e5da33e6b9fe8690432bf1b1dd752f56930c5ea8276e07faba1669915286acd665358f4009853f131eb8eb65b0446f03259d5f92328f51e6a29cce6f84cbdd65327905d5e3ec36b1fd0c9aacd0125eb3be630b961ecf67717beb2f09734865004e83ffbbca8f94df64cb5acc813b9c83f2ed6c4f405b541ee2dbd00458e8f5a"
        ),

		(1300000,  "000008f5d4bbf974d695a199ae367d719d1772f3b5c1c1f9656e46584fb29efe",

			"003fa239ab03a5ddbc3fc0fa04d4a4264d80e6b22a3fe5d924061c7a5fb92e1c8ef31f697181f691ebf2f1e18931a74b3c4413315672603228432fd71fa004015957ea4362ac29f5af37f21a3ea2c849260fd3d3cf46a1e7c9f01c423c1e7d85c17d8a7104ce5741af05262c2bffb64da33896bc5e6b6dbe9cdae8dd3a25702ec59b111cbb98ae95d9725a3b8ff86b81d9b1cbc19b770ad54ede517b2206d0f4ee0af0c601d3fd4fe95d20436d51542401a7a091870c054ee9003aa5cd5a5542010d7af544c85e6700b7e09986d5e5076fda7b1d70872979b60b012c3cb5a7b2962fceb4ddbaa79169903f8773b2fe39c372f7fadac00981f1b3116e1e67aae1a1f00631723f0145ba22c15f493b7bd0bff00634a52bc367bdec5369984076163872b4484109f15a836c6e240d1525412ef8af888b7f6c358170d206f4084587ea3f9832f71cb6e35df4ca1967e6992698c2a54867103efa028325c5f92211c6b72859aa22362915db907827f0efce36cf6be8b7ded6c0191720d4a1910f3b9ce9c5c0c9c3eb7e9c4c32dbec43b291a5"
        ),
    ];

    find_checkpoint(height, checkpoints)
}

fn find_checkpoint(height: u64, chkpts: Vec<(u64, &'static str, &'static str)>) -> Option<(u64, &'static str, &'static str)> {
    // Find the closest checkpoint
    let mut heights = chkpts.iter().map(|(h, _, _)| *h as u64).collect::<Vec<_>>();
    heights.sort();

    match get_first_lower_than(height, heights) {
        Some(closest_height) => {
            chkpts.iter().find(|(h, _, _)| *h ==  closest_height).map(|t| *t)
        },
        None    => None
    }
}

fn get_first_lower_than(height: u64, heights: Vec<u64>) -> Option<u64> {
    // If it's before the first checkpoint, return None. 
    if heights.len() == 0 || height < heights[0] {
        return None;
    }

    for (i, h) in heights.iter().enumerate() {
        if height < *h {
            return Some(heights[i-1]);
        }
    }

    return Some(*heights.last().unwrap());
}

#[cfg(test)]
pub mod tests {
    use super::*;

    #[test]
    fn test_lower_than() {
        assert_eq!(get_first_lower_than( 9, vec![10, 30, 40]), None);
        assert_eq!(get_first_lower_than(10, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(11, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(29, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(30, vec![10, 30, 40]).unwrap(), 30);
        assert_eq!(get_first_lower_than(40, vec![10, 30, 40]).unwrap(), 40);
        assert_eq!(get_first_lower_than(41, vec![10, 30, 40]).unwrap(), 40);
        assert_eq!(get_first_lower_than(99, vec![10, 30, 40]).unwrap(), 40);
    }

    #[test]
    fn test_checkpoints() {
        assert_eq!(get_test_checkpoint(100000), None);
        assert_eq!(get_test_checkpoint(120000).unwrap().0, 120000);
        assert_eq!(get_test_checkpoint(125000).unwrap().0, 120000);
        assert_eq!(get_test_checkpoint(157000).unwrap().0, 157000);
        assert_eq!(get_test_checkpoint(175000).unwrap().0, 157000);

        assert_eq!(get_main_checkpoint(100000), None);
        assert_eq!(get_main_checkpoint(170947).unwrap().0, 170947);
        assert_eq!(get_main_checkpoint(170949).unwrap().0, 170947);
    }

}